{"version":3,"sources":["components/Square.js","components/Colomn.js","components/RunningLine.js","Game.js","App.js","registerServiceWorker.js","index.js"],"names":["Square","props","withoutBorderWidth","width","innerSquareWidth","react_default","a","createElement","x","y","height","fill","stroke","color","strokeWidth","Colomn","squares","i","numRows","push","components_Square","key","disanceY","colors","RunningLine","colomns","map","current","index","components_Colomn","length","Game","Object","classCallCheck","this","initGame","vCenter","Math","floor","hCenter","snake","snakeDirection","eatenFood","initFood","updateField","timeStamp","performance","now","food","random","console","log","field","Array","currentTime","initStartEmptyField","updateSnake","addObjectOnField","fieldObject","slice","newSnakeHead","calcNewSnakeHead","isInSnake","gameOver","shift","grow","snakeHead","fieldPoint","_width","value","_height","_field","fieldValue","_snakeDirection","direction","indexOf","App","_this","possibleConstructorReturn","getPrototypeOf","call","conunter","drowField","bind","assertThisInitialized","onKeyPressed","game","activeColor","passiveColor","document","addEventListener","gameField","state","_this2","self","requestAnimationFrame","step","next","setState","version","viewBox","preserveAspectRatio","components_RunningLine","colorColumn","j","e","code","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App","getElementById","URL","process","origin","concat","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8c67fda4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst Square = (props) => {\n    const borderWidth = 2;\n    const withoutBorderWidth = props.width - borderWidth;\n    const whiteSpaceWidth = 3;\n    const innerSquareWidth = withoutBorderWidth - 2 * whiteSpaceWidth;\n    return (\n        <g>\n            <rect\n                x={props.x}\n                y={props.y}\n                width={withoutBorderWidth}\n                height={withoutBorderWidth}\n                fill=\"white\"\n                stroke={props.color}\n                strokeWidth={borderWidth}\n            />\n            <rect\n                x={1 * props.x + whiteSpaceWidth}\n                y={1 * props.y + whiteSpaceWidth}\n                width={innerSquareWidth}\n                height={innerSquareWidth}\n                fill={props.color}\n            />\n        </g>\n    );\n}\n\nexport default Square;","import React, { Component } from 'react';\nimport Square from './Square'\n\nconst Colomn = (props) => {\n    const squares = [];\n    for (let i = 0; i < props.numRows; i++) {\n        squares.push(\n            <Square\n                key={i}\n                x={props.x}\n                y={1 * props.y + (1 * props.width + 1 * props.disanceY) * i}\n                width={props.width}\n                color={props.colors[i]}\n            />\n        );\n    }\n    return (\n        <g>\n            {squares}\n        </g>\n    );\n}\n\nexport default Colomn;","import React, { Component } from 'react';\nimport Colomn from './Colomn'\n\nconst RunningLine = (props) => {\n    const x = 10;\n    const y = 10;\n    const distance = 3;\n    const width = 20;\n\n    const colomns = props.colors.map((current, index) => {\n        return (\n            <Colomn\n                key={index}\n                x={x + index * (1 * width + distance)}\n                y={y}\n                width={width}\n                disanceY={distance}\n                numRows={current.length}\n                colors={current}\n            />\n        );\n    });\n    return (\n        <g>\n            {colomns}\n        </g>\n    );\n}\n\nexport default RunningLine;","\nclass Game {\n    constructor() {\n        this.initGame();\n    }\n    get width() {\n        return this._width;\n    }\n    set width(value) {\n        this._width = value;\n    }\n    get height() {\n        return this._height;\n    }\n    set height(value) {\n        this._height = value;\n    }\n    get field() {\n        return this._field.slice();\n    }\n    set field(fieldValue) {\n        this._field = fieldValue;\n    }\n    get snakeDirection() {\n        return this._snakeDirection;\n    }\n    set snakeDirection(direction) {\n        if (['up', 'down', 'left', 'right'].indexOf(direction) !== -1) {\n            this._snakeDirection = direction;\n        }\n    }\n    initGame() {\n        this.width = 30;\n        this.height = 15;\n\n        const vCenter = Math.floor((this.height - 1) / 2);\n        const hCenter = Math.floor((this.width - 1) / 2);\n\n        this.snake = [[hCenter - 1,vCenter], [hCenter, vCenter], [hCenter + 1, vCenter]];\n        this.snakeDirection = 'right';\n\n        this.eatenFood = [];\n\n        this.initFood();\n\n        this.updateField();\n\n        this.timeStamp = performance.now();\n    }\n    initFood() {\n        this.food = [[\n            Math.floor(Math.random() * this.width), Math.floor(Math.random() * this.height)\n            // Math.floor(Math.random() * this.width),\n            // Math.floor(Math.random() * this.hieght)\n        ]];\n        console.log(Math.floor(Math.random() * this.height));\n    }\n    initStartEmptyField() {\n        const field = [];\n        for (let i = 0; i < this.width; i++) {\n            field.push(new Array(this.height).fill(0));\n        }\n        this.field = field;\n    }\n    next() {\n        const currentTime = performance.now();\n        if (currentTime > this.timeStamp + 100) {\n            this.timeStamp = currentTime;\n            this.updateField();\n        }\n    }\n    updateField() {\n        this.initStartEmptyField();\n        this.updateSnake();\n        this.addObjectOnField(this.food);\n        this.addObjectOnField(this.snake);\n    }\n    addObjectOnField(fieldObject) {\n        const field = this.field;\n        for (let i = 0; i < fieldObject.length; i++) {\n            field[fieldObject[i][0]][fieldObject[i][1]] = 1;\n        }\n        this.field = field;\n    }\n    updateSnake() {\n        const snake = this.snake.slice();\n        const newSnakeHead = this.calcNewSnakeHead();\n\n        if (this.isInSnake(newSnakeHead)) {\n            this.gameOver();\n            return;\n        }\n\n        if (this.food.length > 0) {\n            const food = this.food[0];\n            if (newSnakeHead[0] === food[0] && newSnakeHead[1] === food[1]) {\n                this.eatenFood.push(this.food.shift());\n                this.initFood();\n            }\n        }\n\n        let grow = false;\n        if (this.eatenFood.length > 0) {\n            const eatenFood = this.eatenFood[0];\n            grow = eatenFood[0] === snake[0][0] && eatenFood[1] === snake[0][1];\n            if (grow) {\n                this.eatenFood.shift();\n            }\n        }\n\n        snake.push(newSnakeHead);\n        this.snake = snake.slice(grow ? 0 : 1);\n    }\n    calcNewSnakeHead() {\n        const snakeHead = this.snake[this.snake.length - 1];\n        const newSnakeHead = snakeHead.slice();\n        if (this.snakeDirection === 'right') {\n            newSnakeHead[0] = (snakeHead[0] + 1) % this.width;\n        }\n        if (this.snakeDirection === 'left') {\n            newSnakeHead[0] = (snakeHead[0] - 1 + this.width) % this.width;\n        }\n        if (this.snakeDirection === 'down') {\n            newSnakeHead[1] = (snakeHead[1] + 1) % this.height;\n        }\n        if (this.snakeDirection === 'up') {\n            newSnakeHead[1] = (snakeHead[1] - 1 + this.height) % this.height;\n        }\n        return newSnakeHead;\n    }\n    isInSnake(fieldPoint) {\n        for (let i = 0; i < this.snake.length; i++) {\n            if (this.snake[i][0] === fieldPoint[0] && this.snake[i][1] === fieldPoint[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    gameOver() {\n        this.initGame();\n    }\n}\n\nexport {\n    Game\n};","import React, { Component } from 'react';\nimport RunningLine from './components/RunningLine';\nimport { Game } from './Game';\n\nclass App extends Component {\n  constructor () {\n    super();\n    this.conunter = 0;\n\n    this.drowField = this.drowField.bind(this);\n    this.onKeyPressed = this.onKeyPressed.bind(this);\n\n    this.game = new Game();\n\n    this.activeColor = \"#111\";\n    this.passiveColor = \"#ddd\";\n\n    document.addEventListener(\"keydown\", this.onKeyPressed.bind(this));\n\n    const gameField = this.game.field;\n    const colors = this.drowField(gameField);\n    this.state = {colors: colors};\n  }\n\n  componentDidMount() {\n    const self = this;\n    const step = () => {\n      self.game.next();\n      const colors = self.drowField(this.game.field);\n      self.setState({colors: colors});\n      requestAnimationFrame(step);\n    }\n    requestAnimationFrame(step);\n  }\n\n\n  render() {\n    return (\n      <svg width=\"1000\" height=\"400\" version=\"1.1\"\n        viewBox=\"0 0 1000 400\" preserveAspectRatio=\"none\">\n        <RunningLine colors={this.state.colors}/>\n      </svg>\n    );\n  }\n  drowField(gameField) {\n    const colors = [];\n    for (let i = 0; i < this.game.width; i++) {\n      const colorColumn = [];\n      for (let j = 0; j < this.game.height; j++) {\n        colorColumn.push(gameField[i][j] >= 1 ? this.activeColor : this.passiveColor);\n      }\n      colors.push(colorColumn);\n    }\n    return colors;\n  }\n  onKeyPressed(e) {\n    switch (e.code) {\n\n      case 'ArrowUp':\n        this.game.snakeDirection = 'up';\n        break;\n\n      case 'ArrowDown':\n        this.game.snakeDirection = 'down';\n        break;\n\n      case 'ArrowLeft':\n        this.game.snakeDirection = 'left';\n        break;\n\n      case 'ArrowRight':\n        this.game.snakeDirection = 'right';\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}